#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# qats documentation build configuration file, created by
# sphinx-quickstart on Sat Dec 16 19:53:09 2017.
#
# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import sphinx_bootstrap_theme
from sphinx.ext.autosummary import Autosummary
from sphinx.ext.autosummary import get_documenter
from docutils.parsers.rst import directives
from sphinx.util.inspect import safe_getattr
import re
import sphinx.ext.autodoc

sys.path.append(os.path.abspath(os.path.join('..', '..')))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    # 'autoapi.extension',  # ref. https://buildmedia.readthedocs.org/media/pdf/sphinx-autoapi/latest/sphinx-autoapi.pdf
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.autosummary',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.imgmath',
    'sphinx.ext.ifconfig',
    # 'numpydoc',
    # 'm2r',
    # 'sphinx.ext.viewcode',  # remove this one to disable code view
]

# -- AutoAPI configuration   ----------------------------------------------
# ref.: https://buildmedia.readthedocs.org/media/pdf/sphinx-autoapi/latest/sphinx-autoapi.pdf
# autoapi_dirs = ['../../qats']
# autoapi_add_toctree_entry = False     # default: True
# autoapi_root = 'api'
# autoapi_generate_api_docs = False     # default: True
# autoapi_include_summaries = False      # default: False
# autoapi_keep_files = False            # default: False
# autoapi_python_class_content = 'both'   # default: 'class'
# autoapi_options = ['members', 'undoc-members', ]  # 'private-members', 'special-members']
# autoapi_ignore = ['*app*']

# -------------------------------------------------------------------------

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']  # source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'QATS'
copyright = 'DNV GL'
author = 'Per Voie, Erling Lone'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ''
# The full version, including alpha/beta/rc tags.
release = ''

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'bootstrap'
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()
html_logo = 'img/qats.ico'

# Include sidebar
# todo: consider including sidebar (just remove comment on next line to do so)
html_sidebars = {
    '**': ['localtoc.html', ],  # 'relations.html', ],  #'globaltoc.html', 'sourcelink.html', 'searchbox.html']}
}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    # Navigation bar title. (Default: ``project`` value)
    # 'navbar_title': "Demo",

    # Tab name for entire site. (Default: "Site")
    # 'navbar_site_name': "Site",

    # A list of tuples containing pages or urls to link to.
    # Valid tuples should be in the following forms:
    #    (name, page)                 # a link to a page
    #    (name, "/aa/bb", 1)          # a link to an arbitrary relative url
    #    (name, "http://example.com", True) # arbitrary absolute url
    # Note the "1" or "True" value above as the third argument to indicate
    # an arbitrary url.
    'navbar_links': [
        ("Getting started", "getting_started"),
        ("GUI", "gui"),
        ("Examples", "examples"),
        ("API", "api/index"),
    ],

    # Render the next and previous page links in navbar. (Default: true)
    'navbar_sidebarrel': False,

    # Render the current pages TOC in the navbar. (Default: true)
    'navbar_pagenav': False,  # True,

    # Tab name for the current pages TOC. (Default: "Page")
    'navbar_pagenav_name': "Page",

    # Global TOC depth for "site" navbar tab. (Default: 1)
    # Switching to -1 shows all levels.
    'globaltoc_depth': 3,

    # Include hidden TOCs in Site navbar?
    #
    # Note: If this is "false", you cannot have mixed ``:hidden:`` and
    # non-hidden ``toctree`` directives in the same page, or else the build
    # will break.
    #
    # Values: "true" (default) or "false"
    'globaltoc_includehidden': "true",

    # HTML navbar class (Default: "navbar") to attach to <div> element.
    # For black navbar, do "navbar navbar-inverse"
    'navbar_class': "navbar navbar-inverse",

    # Fix navigation bar to top of page?
    # Values: "true" (default) or "false"
    'navbar_fixed_top': "true",

    # Location of link to source.
    # Options are "nav" (default), "footer" or anything else to exclude.
    'source_link_position': None,

    # Bootswatch (http://bootswatch.com/) theme.
    #
    # Options are nothing (default) or the name of a valid theme
    # such as "united", "cosmo" or "sandstone".
    # 'bootswatch_theme': "cosmo",  # (original theme)
    'bootswatch_theme': "spacelab",  # (looks good, better 'See Also' sections)
    # 'bootswatch_theme': "cerulean",  # (looks okay)
    # 'bootswatch_theme': "sandstone",

    # Choose Bootstrap version.
    # Values: "3" (default) or "2" (in quotes)
    'bootstrap_version': "3",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
#
# html_static_path = ['_static']
# html_style = 'style.css'

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}


# -----------------------------------------------------------------------------
# Autosummary
# ... based on code and inspiration provided by:
#   https://stackoverflow.com/questions/20569011/python-sphinx-autosummary-automated-listing-of-member-functions
#   https://github.com/markovmodel/PyEMMA/blob/devel/doc/source/conf.py#L285
# -----------------------------------------------------------------------------

# autosummary_generate = True  # what difference does this variable do, actually??

autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',  # 'alphabetical', 'groupwise', 'bysource'
    'special-members': '__init__',
}


# try to exclude deprecated
def skip_deprecated(app, what, name, obj, skip, options):
    if hasattr(obj, "func_dict") and "__deprecated__" in obj.func_dict:
        print("skipping " + name)
        return True
    return skip or False


def setup(app):
    app.connect('autodoc-skip-member', skip_deprecated)
    app.add_stylesheet("custom-todo-style.css")  # also can be a full URL
    try:
        class AutoAutoSummary(Autosummary):

            option_spec = {
                'methods': directives.unchanged,
                'attributes': directives.unchanged,
                'functions': directives.unchanged,  # enlo 09.03.2018
                'toctree': directives.unchanged,
            }

            required_arguments = 1

            @staticmethod
            def get_members(obj, typ, include_public=None):
                if not include_public:
                    include_public = []
                items = []
                for name in dir(obj):
                    try:
                        documenter = get_documenter(safe_getattr(obj, name), obj)
                    except AttributeError:
                        continue
                    if documenter.objtype == typ:
                        items.append(name)
                public = [x for x in items if x in include_public or not x.startswith('_')]
                return public, items

            def run(self):
                if 'functions' in self.options and ('methods' in self.options or 'attributes' in self.options):
                    raise Exception("invalid option combination: %s" % self.options)

                if not 'functions' in self.options:
                    clazz = self.arguments[0]
                    try:
                        (module_name, class_name) = clazz.rsplit('.', 1)
                        m = __import__(module_name, globals(), locals(), [class_name])
                        c = getattr(m, class_name)
                        if 'methods' in self.options:
                            _, methods = self.get_members(c, 'method', ['__init__'])

                            self.content = ["~%s.%s" % (clazz, method) for method in methods if not method.startswith('_')]

                        if 'attributes' in self.options:
                            _, attribs = self.get_members(c, 'attribute')
                            self.content = ["~%s.%s" % (clazz, attrib) for attrib in attribs if not attrib.startswith('_')]

                    finally:
                        return super(AutoAutoSummary, self).run()

                else:  # --> 'functions' in self.options
                    # dirty fix by enlo to handle autosummary of module functions
                    import inspect as insp
                    module = self.arguments[0]
                    try:
                        root_name, module_name = module.rsplit('.', 1)
                        r = __import__(root_name, globals(), locals(), [module_name])
                        m = getattr(r, module_name)
                        functions = [o[0] for o in insp.getmembers(m)
                                     if insp.isfunction(o[1]) and o[1].__module__ == m.__name__]
                        self.content = ["~%s.%s" % (module, func) for func in functions if not func.startswith('_')]

                    finally:
                        return super(AutoAutoSummary, self).run()

        app.add_directive('autoautosummary', AutoAutoSummary)
    except BaseException as e:
        raise e
